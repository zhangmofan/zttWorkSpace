{"ast":null,"code":"// 引入Count的UI组件\nimport CountUI from './CountUI'; // 错误写法：引入redux(即store),不能自己引入，需要index.js传递过来\n// import store from './redux/store';\n// 引入connect 用于连接UI组件和redux\n\nimport { connect } from 'react-redux'; // 引入actionCreator，专门用于创建action对象\n\nimport { createIncrementAction, createDecrementAction, createIncrementAsyncAction } from './count_action';\n/*\n    1. mapStateToProps函数返回的是一个对象\n    2. 返回的对象中key和value作为传递到UI组件props上的key和value\n    3. mapStateToProps用于传递状态\n    4. state 相当于 store.getState()\n*/\n\nfunction mapStateToProps(state) {\n  return {\n    count: state\n  };\n}\n/*\n    1. mapDispatchToProps函数返回的是一个对象\n    2. 返回的对象中key和value作为传递到UI组件props上的key和value\n    3. mapDispatchToProps用于传递操作状态的方法\n    4. dispath 相当于 store.dispath()\n*/\n\n\nfunction mapDispatchToProps(dispath) {\n  return {\n    // 通知reducer执行加法\n    jia: data => {\n      dispath(createIncrementAction(data));\n    },\n    // 通知reducer执行减法\n    jian: data => {\n      dispath(createDecrementAction(data));\n    },\n    // 通知reducer执行延时加法\n    jiaa: data => {\n      dispath(createIncrementAsyncAction(data, 1000));\n    }\n  };\n} // 使用connect()()创建并暴露一个Count的容器组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountUI);\n/* \nconst CountContainer = connect()(CountUI);\nexport default CountContainer; \n*/","map":{"version":3,"sources":["/home/admin/ztt01114131/zhangmofan/zttWorkSpace/myReact/my-react-app/src/views/React_redux/Container.jsx"],"names":["CountUI","connect","createIncrementAction","createDecrementAction","createIncrementAsyncAction","mapStateToProps","state","count","mapDispatchToProps","dispath","jia","data","jian","jiaa"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,WAApB,C,CAEA;AACA;AAEA;;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;;AACA,SAAQC,qBAAR,EAA8BC,qBAA9B,EAAoDC,0BAApD,QAAqF,gBAArF;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC3B,SAAO;AAACC,IAAAA,KAAK,EAACD;AAAP,GAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA4BC,OAA5B,EAAoC;AAChC,SAAO;AACH;AACAC,IAAAA,GAAG,EAAEC,IAAD,IAAQ;AAACF,MAAAA,OAAO,CAACP,qBAAqB,CAACS,IAAD,CAAtB,CAAP;AAAqC,KAF/C;AAGH;AACAC,IAAAA,IAAI,EAAED,IAAD,IAAQ;AAACF,MAAAA,OAAO,CAACN,qBAAqB,CAACQ,IAAD,CAAtB,CAAP;AAAqC,KAJhD;AAKH;AACAE,IAAAA,IAAI,EAAEF,IAAD,IAAQ;AACTF,MAAAA,OAAO,CAACL,0BAA0B,CAACO,IAAD,EAAM,IAAN,CAA3B,CAAP;AACH;AARE,GAAP;AAUH,C,CAGD;;;AACA,eAAeV,OAAO,CAACI,eAAD,EAAiBG,kBAAjB,CAAP,CAA4CR,OAA5C,CAAf;AAEA;AACA;AACA;AACA","sourcesContent":["// 引入Count的UI组件\nimport CountUI from './CountUI';\n\n// 错误写法：引入redux(即store),不能自己引入，需要index.js传递过来\n// import store from './redux/store';\n\n// 引入connect 用于连接UI组件和redux\nimport {connect} from 'react-redux';\n\n// 引入actionCreator，专门用于创建action对象\nimport {createIncrementAction,createDecrementAction,createIncrementAsyncAction} from './count_action';\n\n/*\n    1. mapStateToProps函数返回的是一个对象\n    2. 返回的对象中key和value作为传递到UI组件props上的key和value\n    3. mapStateToProps用于传递状态\n    4. state 相当于 store.getState()\n*/ \nfunction mapStateToProps(state){\n    return {count:state}\n}\n\n/*\n    1. mapDispatchToProps函数返回的是一个对象\n    2. 返回的对象中key和value作为传递到UI组件props上的key和value\n    3. mapDispatchToProps用于传递操作状态的方法\n    4. dispath 相当于 store.dispath()\n*/ \nfunction mapDispatchToProps(dispath){\n    return {\n        // 通知reducer执行加法\n        jia:(data)=>{dispath(createIncrementAction(data))},\n        // 通知reducer执行减法\n        jian:(data)=>{dispath(createDecrementAction(data))},\n        // 通知reducer执行延时加法\n        jiaa:(data)=>{\n            dispath(createIncrementAsyncAction(data,1000))\n        },\n    }\n}\n\n\n// 使用connect()()创建并暴露一个Count的容器组件\nexport default connect(mapStateToProps,mapDispatchToProps)(CountUI);\n\n/* \nconst CountContainer = connect()(CountUI);\nexport default CountContainer; \n*/\n"]},"metadata":{},"sourceType":"module"}